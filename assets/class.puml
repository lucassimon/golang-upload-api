@startuml classes

class BucketFactory {
    Name       string
	BucketName string
	Path       string
    Provider   ProviderInterface
    MakeBucketStrategy()
}

class MediaInput {
	File        *multipart.FileHeader
	Filename    string
	UniqueName  string
	Extension   string
	ContentType string
	Size        int64
    Title       string
    Description string
    Alt         string
}

class MediaEntity {
    Id          uuid
    Name        string
    ContentType string
    Link        string
    Provider    string
    BucketName  string
    Directory   string
    Size        int64
    Title       string
    Description string
    Alt         string
    MakeMediaEntity()
    Print()
    GetID()
    GetName()
    GetContentType()
    GetLink()
    GetBucketName()
    GetProvider()
    GetDirectory()
    GetSize()
}

class MediaOutput {
	Link        string
    Title       string
    Description string
    Alt         string
}


class UploadFilesUseCase {
    Service UploadService
    NewUploadFilesUseCase()
    Execute()
}

class UploadService {
    Bucket     *buckets.BucketFactory
	Repository db.MediaDBRepositoryInterface
    Upload()
    Save()
}

class MediaDB {
    db *sql.DB
    Create(...)
    FindAll(...)
    FindByID(...)
    Delete(...)
}

interface MediaDBRepositoryInterface {
    Create(media *entity.MediaEntity) error
	FindAll(page, limit int, sort string) ([]entity.MediaEntity, error)
	FindByID(id string) (*entity.MediaEntity, error)
	Delete(id string) error
}

interface ProviderInterface {
    upload(ctx, file, uniqueName, extension) (string, error)
}

class ProviderGCP {
    upload(...)
}

class ProviderAWS {
    upload(...)
}

class ProviderDO {
    upload(...)
}

class ProviderCloudinary {
    upload(...)
}

class ProviderLocal {
    upload(...)
}

ProviderInterface <|-- ProviderGCP
ProviderInterface <|-- ProviderAWS
ProviderInterface <|-- ProviderDO
ProviderInterface <|-- ProviderCloudinary
ProviderInterface <|-- ProviderLocal

MediaDBRepositoryInterface <|-- MediaDB

@enduml
